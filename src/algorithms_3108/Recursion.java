package algorithms_3108;

public class Recursion {
    /*Рекурсия - процесс, в котором функция прямо или косвенно вызывает сама себя,
    а соответствующая функция называется рекурсивной функцией.
    Важно! Мы должны обеспечить определенный случай, чтобы завершить этот процесс рекурсии.
    Каждый раз функция вызывает себя с более простой версией исходной задачи
    Подход №1
n = 5
function(n) = for(1+2+3+4+…+n) -> res = res+1, i<=n
Подход №2
n=5
function(n) = n+function(n-1) -> n = 1
     */
    /* Рекурсия прекращается, когда базовый случай истинный, используется с функциями
    Каждому рекурсивному вызову требуется доп место в памяти стека, меньший размер кода
    Итерация - прекращается, когда БС становится ложным, используется с циклами
    Каждая итерация не требует доп места в памяти, большой размер кода
    Бесконечная рекурсия может привести к нехватке памяти(StackOverFlow)
    Рекурсивная функция использует структуру LIFO - Stack
    Память для вызываемой функции выделяется поверх памяти, выделенной для вызывающей функции
    Для каждого вызова функции создается другая копия локальных переменных
    Когда БС достигнут, функция возвращает свое значение функции, которойона вызывается, и память освобождается
     */
    public static void main(String[] args) {

    }
}
